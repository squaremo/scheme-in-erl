start <- expr* ws
`hd(Node)`;

ws <- [ \t\n]*
;

expr <- ws list
      / ws term
`[_, Expr] = Node, Expr`;

list <- '(' expr* ws ')'
`[_Open, Es, _, _Close] = Node, Es`;

term <- bool / string / number / symbol;

bool <- true / false;

true  <- '#t' `true`;
false <- '#f' `false`;

string <- '"' chars:(!'"' ("\\\\" / '\\"' / .))* '"'
`iolist_to_binary(proplists:get_value(chars, Node))`;

symbol <- (![0-9-] symbolchar) symbolchar*
`binary_to_atom(iolist_to_binary(Node), utf8)`;

symbolchar <- [a-z] / [A-Z] / [0-9] / [-+_/:=?!<>%&*];

number <- int frac? exp?
`
case Node of
  [Int, [], []] -> list_to_integer(binary_to_list(iolist_to_binary(Int)));
  [Int, Frac, []] -> list_to_float(binary_to_list(iolist_to_binary([Int, Frac])));
  [Int, [], Exp] -> list_to_float(binary_to_list(iolist_to_binary([Int, ".0", Exp])));
  _ -> list_to_float(binary_to_list(iolist_to_binary(Node)))
end
`;

int <- '-'? (non_zero_digit digit+) / digit ~;
frac <- '.' digit+ ~;
exp <- e digit+ ~;
e <- [eE] ('+' / '-')? ~;
non_zero_digit <- [1-9] ~;
digit <- [0-9] ~;
